apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: chainocracy-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: chainocracy-backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: chainocracy-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: ${REGISTRY_URL}/chainocracy-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
        - name: grpc
          containerPort: 3002
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: node_env
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: log_level
        - name: API_PORT
          value: "3000"
        - name: SERVER_PORT
          value: "3002"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: db_host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: db_port
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: db_name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: db_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: db_password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: jwt_secret
        - name: BLOCKCHAIN_NODE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: blockchain_node_url
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
        - name: leveldb-data
          mountPath: /app/data
      volumes:
      - name: config-volume
        configMap:
          name: backend-config
      - name: tmp-volume
        emptyDir: {}
      - name: leveldb-data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - chainocracy-backend
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  labels:
    app: chainocracy-backend
spec:
  selector:
    app: chainocracy-backend
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 3002
    targetPort: grpc
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  node_env: "production"
  log_level: "info"
  blockchain_node_url: "http://blockchain-node-service:26657"
  config.json: |
    {
      "api": {
        "cors": {
          "enabled": true,
          "origins": ["https://app.chainocracy.io"]
        },
        "rateLimit": {
          "enabled": true,
          "windowMs": 60000,
          "max": 100
        }
      },
      "blockchain": {
        "consensusAlgorithm": "pbft",
        "blockTime": 5000,
        "maxTransactionsPerBlock": 1000
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
