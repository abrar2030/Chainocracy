apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-web-deployment
  labels:
    app: chainocracy-frontend-web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: chainocracy-frontend-web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: chainocracy-frontend-web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: frontend-web
        image: ${REGISTRY_URL}/chainocracy-frontend-web:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
        env:
        - name: VITE_API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: api_url
        - name: VITE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: environment
        - name: VITE_BLOCKCHAIN_NODE_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: blockchain_node_url
        - name: VITE_FIREBASE_API_KEY
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_api_key
        - name: VITE_FIREBASE_AUTH_DOMAIN
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_auth_domain
        - name: VITE_FIREBASE_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_project_id
        - name: VITE_FIREBASE_STORAGE_BUCKET
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_storage_bucket
        - name: VITE_FIREBASE_MESSAGING_SENDER_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_messaging_sender_id
        - name: VITE_FIREBASE_APP_ID
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: firebase_app_id
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 2
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tmp-volume
        emptyDir: {}
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - chainocracy-frontend-web
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-web-service
  labels:
    app: chainocracy-frontend-web
spec:
  selector:
    app: chainocracy-frontend-web
  ports:
  - name: http
    port: 80
    targetPort: http
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  api_url: "https://api.chainocracy.io"
  environment: "production"
  blockchain_node_url: "https://node.chainocracy.io"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      listen 80;
      server_name _;
      root /usr/share/nginx/html;
      index index.html;
      
      # Enable gzip compression
      gzip on;
      gzip_comp_level 5;
      gzip_min_length 256;
      gzip_proxied any;
      gzip_vary on;
      gzip_types
        application/javascript
        application/json
        application/x-javascript
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
      
      location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
      }
      
      location /static/ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
      }
      
      location /assets/ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
      }
      
      location /api/ {
        proxy_pass http://backend-service/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
      }
    }
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-web-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend-web-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 60
